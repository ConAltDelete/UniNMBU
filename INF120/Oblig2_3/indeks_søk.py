# -*- coding: utf-8 -*-
from ferdig_indeks import last_in_indeks  # Her laster vi inn en ferdig s칮keindeks

__author__ = "Mats Hoem Olsen"
__email__ = "matsols@nmbu.no"

def fjern_spesialtegn(streng):
	r"""
	Fjern de f칮lgende spesialtegnene fra input strengen:
		``[',', '.', '"', '\'', ':', ';', '(', ')', '-', '?', '!']``
	
	Arguments
	---------
	streng : str
		Input strengen som spesialtegn skal fjernes fra
	
	Returns
	-------
	ren_streng : str
		Strengen etter at spesialtegn er fjernet.
	
	Note
	----
	Vi ser igjennom strengen karakter for karakter mens vi filtrerer bort u칮nskede tegn.
	"""

	return "".join([t for t in streng if t not in [',', '.', '"', '\'', ':', ';', '(', ')', '-', '?', '!']])

def finn_unike_ord_i_streng(streng):
	"""
	Lag en mengde med alle ordene som dukker opp i strengen.
	
	Pass p친 at strengen kun inneholder sm친 bokstaver (hvis store bokstaver
	er med i strengen skal de bli gjort om til sm친 bokstaver). Mellomrom
	p친 slutten og starten av linjer skal ogs친 fjernes.
	
	De f칮lgende spesialtegn m친 og fjernes:
	``[',', '.', '"', '\'', ':', ';', '(', ')', '-', '?', '!']``
	
	Arguments
	---------
	streng : str
		Strengen vi vil finne unike tegn i.
	
	Returns
	-------
	ord_i_streng : Set[str]
		Mengden med unike ord i strengen.
	
	Notes
	-----
	Vi fjerner spesialtegn (og konverterer stor til liten). Ved 친 sette listen, generert av split(), i et set() fjerner vi duplikater. 
	"""
	return set(fjern_spesialtegn(streng).split())

def finn_felles_ellement_i_flere_mengder(liste_av_mengder):
	"""
	Lag en funksjon som finner felles element i en samling av mengder (set).
	
	Arguments
	---------
	liste_av_mengder : List[Set]
		En liste hvor hvert element er en mengde (set p친 engelsk).
	
	Returns
	-------
	snitt_av_mengder : Set[str]
		En mengde som kun inneholder de elementene som er del av ALLE
		mengdene i ``liste_av_mengder``.
	
	Notes
	-----
	Vi samler settene i en string fors친 sette alt i en string-versjon av 
	funksjonen v친r, deretter kj칮rer vi en eval for 친 kj칮re funksjonen.
	"""
	return liste_av_mengder[0].intersection(*liste_av_mengder[1:]) if len(liste_av_mengder) > 0 else set()

def s칮k_i_indeks_med_mengde(indeks, mengde_av_s칮keord):
	"""
	Finn alle dokument som inneholder alle s칮keordene i ``mengde_av_s칮keord``.

	Denne funksjonen skal ta to argument som input, en s칮keindeks og 
	en mengde med s칮keord.

	S칮keindeksen er en dictionary med engelske ord som n칮kler og mengden med alle
	dokument som inneholder det ordet som verdi.

	Mengden med s칮keord er en mengde (set p친 Engelsk) som beskriver hva
	som s칮kes etter.

	Det som returneres er mengden med dokument som inneholder ALLE s칮keordene.

	Arguments
	---------
	indeks : dict[str] -> Set[str]
		S칮keindeksen.
	mengde_av_s칮keord : Set[str]
		Mengden med s칮keord.

	Returns
	-------
	relevante_b칮ker : Set[str]
		Mengden med b칮ker som inneholder alle ordene i ``mengde_av_s칮keord``.

	Notes
	-----
	Vi henter et s칮keord av gangen, hvis den er i indeksen henter vi alle b칮kene 
	som har ordet, ellers ignorerer vi det. Til slutt finner vi fellesen av alle mengdene.
	Denne funksjonen blir ikke brukt i denne filen.... yeahhhh..... Fungerer i teorien. 游때
	"""
	return finn_felles_ellement_i_flere_mengder([indeks[w] if w in indeks else set() for w in mengde_av_s칮keord])

def klargj칮r_s칮kestreng(s칮kestreng):
	r"""
	Ta inn en s칮kestreng og klargj칮r den for 친 s칮ke i en s칮keindeks.

	Strengen skal behandles p친 samme m친te som vi behandler nye strenger
	som skal indekseres. Store bokstaver skal gj칮res om til sm친,
	spesialtegn skal fjernes og "whitespace" tegn p친 starten og slutten
	av strengen skal fjernes. Til slutt skal strengen splittes ved 
	alle mellomrom og duplikatord skal fjernes.

	Arguments
	---------
	s칮kestreng : str
		Strengen vi vil finne unike tegn i.
	
	Returns
	-------
	ord_i_streng : Set[str]
		Mengden med unike ord i strengen.
	
	Notes
	-----
	Vi bruker tidligere funksjoner. Blant annet finn_unike_ord_i_streng().
	Og kanskje lower() metoden... 
	"""
	return finn_unike_ord_i_streng(s칮kestreng.lower())

def s칮k_i_indeks_med_streng(indeks, s칮kestreng):
	"""
	Finn alle dokument som inneholder alle s칮keordene i ``s칮kestreng``.

	Denne funksjonen skal ta to argument som input, en s칮keindeks og 
	en mengde med s칮keord.

	S칮keindeksen er en dictionary med engelske ord som n칮kler og mengden med alle
	dokument som inneholder det ordet som verdi.

	S칮kestrengen skal f칮rst klargj칮res. Dette gj칮res ved 친 gj칮re strengen til
	sm친 bokstaver og 친 fjerne spesialtegn. I tillegg skal og whitespace p친 
	starten og slutten av strengen fjernes. Deretter skal hvert ord i 
	s칮kestrengen hentes ut. Disse ordene brukes n친r det skal s칮kes i
	de indekserte dokumentene.

	Det som returneres er mengden med dokument som inneholder ALLE s칮keordene.

	Arguments
	---------
	indeks : dict
		S칮keindeksen.
	mengde_av_s칮keord : str
		Mengden med s칮keord.

	Returns
	-------
	relevante_b칮ker : Set[str]
		Mengden med b칮ker som inneholder alle ordene i ``mengde_av_s칮keord``.

	Notes
	-----
	Denne starter med 친 hente alle mengdene i indeks, men hvis s칮kerordet ikke eksisterer 
	s친 settes in et tomt set. Dette kunne erstates med en return for 친 spare tid siden 
	intersection av ingenting er ingenting. Til slutt finner den felleselementer.
	"""
	return finn_felles_ellement_i_flere_mengder([indeks[o] if o in indeks else set() for o in klargj칮r_s칮kestreng(s칮kestreng)])


if __name__ == "__main__":
	s칮kestreng = "Sherlock Holmes, scarlet"
	indeks = last_in_indeks()  # Jeg (Yngve) har allerede lagd en indeks dere kan s칮ke i
							   # Den henter vi ut her.
	#open("test.txt","w").write(str(indeks))

	print(s칮k_i_indeks_med_streng(indeks, s칮kestreng))
	# Denne skal printe
	#  {'Chronicles_of_Martin_Hewitt.bok', 'The_Hound_of_the_Baskervilles.bok'}